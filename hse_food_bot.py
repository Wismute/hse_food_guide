"""–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞"""

import os
import json
import telebot
from telebot import types
import cherrypy
import sentry_sdk
from dotenv import load_dotenv

import config
import stats
from keyboards import (
    send_categories,
    send_locations,
    send_review_request_and_navigation)

load_dotenv()

TOKEN = os.getenv('TOKEN')
PORT = int(os.getenv('PORT'))
SENTRY_URL = os.getenv('SENTRY_URL')
ADMIN_USERNAMES = os.getenv('ADMIN_USERNAMES').split(',')

LOCATIONS = config.LOCATIONS
SEGMENTS = config.SEGMENTS
CATEGORIES = config.CATEGORIES

sentry_sdk.init(SENTRY_URL, traces_sample_rate=1.0)

bot = telebot.TeleBot(TOKEN)

states = {}


def save_states():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""

    with open('saved_states.txt', 'w', 
              encoding='utf-8') as states_file:
        json.dump(states, states_file)


def load_states():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
    global states

    with open('saved_states.txt', 'r',
              encoding='utf-8') as states_file:
        states = json.load(states_file)

load_states()


@bot.message_handler(func=lambda message: True, content_types=["text"])
def main(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏"""

    def get_location(user_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ—Ä–ø—É—Å–∞"""

        try:
            return states[user_data]
        except KeyError:
            send_locations(bot, message)
            return None

    username = message.from_user.username
    user_id = message.from_user.id
    user_data = f'{username}/{user_id}'

    if '/start' == message.text:
        stats.register_user(user_id, username)

        bot.send_message(message.chat.id, text=config.HELLO_TEXT)

        send_locations(bot, message)


    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif message.text in LOCATIONS:
        states.update({user_data: message.text})
        send_categories(bot, message)

    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ
    elif message.text in SEGMENTS:
        category = CATEGORIES[message.text.split()[-1]]

    elif '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º' == message.text:
        send_categories(bot, message)

    elif '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª–æ–∫–∞—Ü–∏—è–º' == message.text:
        send_locations(bot, message)

    # –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    elif username in ADMIN_USERNAMES:

        if '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' == message.text:
            ans = stats.get_stat()
            bot.send_message(message.chat.id, text=ans,
                             parse_mode='Markdown')

        if 'save' == message.text.lower():
            save_states()


    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è,
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∑–∞–≤–µ–¥–µ–Ω–∏–π
    # –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞ –∏ —Å–∞–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif message.text in SEGMENTS:

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        bot.send_message(message.chat.id, message.text)

        # –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats.category_tap(category)

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å
        location = get_location(user_data)

        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏
        if location:
            with open(f"{location}/{category}/index.txt",
                      "r", encoding="utf-8") as f:
                places_names = f.read().split('\n')

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

            # –ò–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ –ª–∏–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            x = 0
            y = 1

            # –ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if round(len(places_names)/2) == 0:
                markup.row(places_names[x])

            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            # –í –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏ –¥–≤–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            #
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π –Ω–µ—á–µ—Ç–Ω–æ–µ,
            # —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            else:

                for i in range(round(len(places_names)/2)):
                    try:
                        markup.row(places_names[x], places_names[y])
                        x += 2
                        y += 2
                    except IndexError:
                        markup.row(places_names[x])

            markup.row('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
            markup.row('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª–æ–∫–∞—Ü–∏—è–º')

            ans = '*–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ*\n–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
            bot.send_message(message.chat.id, text=ans,
                             reply_markup=markup, parse_mode='Markdown')

        # –ò–ª–∏ –¥–∞–µ–º –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å
        else:
            send_locations(bot, message)

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
    else:

        location = get_location(user_data)

        if location:

            # –£—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–≥–Ω–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è
            if message.text.startswith('üî• '):
                stats.promo_count(message.text[1::])

            with open(f'{location}/{category}/list.txt', 'r', encoding="utf-8") as f:
                places = f.read().split('<br>\n')

            for place in places:

                if message.text.startswith(place):

                    bot.send_message(message.chat.id, text=i,
                                     parse_mode='Markdown')
                    send_review_request_and_navigation(bot, message)
                    break


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    if call.message:

        if 'useful' == call.data:
            stats.useful()
            bot.send_message(call.message.chat.id,
                             text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! (+)')

        elif 'not_useful' == call.data:
            stats.not_useful()
            bot.send_message(call.message.chat.id,
                             text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! (-)')

        elif 'back_to_categories' == call.data:
            send_categories(bot, call.message)

        elif 'back_to_locations' == call.data:
            send_locations(bot, call.message)


class WebhookServer(object):
    @cherrypy.expose
    def index(self):
        """–°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞"""

        length = int(cherrypy.request.headers['content-length'])
        json_string = cherrypy.request.body.read(length).decode("utf-8")
        update = telebot.types.Update.de_json(json_string)

        bot.process_new_updates([update])
        return ''


if __name__ == '__main__':

    cherrypy.config.update({
        'server.socket_host': '127.0.0.1',
        'server.socket_port': PORT
    })

    cherrypy.quickstart(WebhookServer(), '/', {'/': {}})
